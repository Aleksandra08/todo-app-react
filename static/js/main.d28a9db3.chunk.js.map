{"version":3,"sources":["components/Header.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","event","setState","target","handleSubmit","preventDefault","addItem","react_default","a","createElement","className","onSubmit","placeholder","type","onChange","React","Component","Main","list","items","map","el","key","id","change","checked","completed","title","onClick","removeItem","htmlFor","App","changeItem","todos","toConsumableArray","itemsList","index","findIndex","item","objectSpread","todoItem","Date","now","prev","concat","splice","filter","Header_Header","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d28a9db3.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Header extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: ''\n        };\n\n        this.handleChange = (event) => {\n            this.setState({value: event.target.value});\n        };\n\n        this.handleSubmit = (event) => {\n            event.preventDefault();\n            this.props.addItem(this.state.value);\n            this.setState({\n                value: ''\n            })\n        }\n    }\n\n    render() {\n      return (\n            <header className='header'>\n                <h1>todos</h1>\n                <form onSubmit={this.handleSubmit}>\n                    <input\n                        className='new-todo'\n                        placeholder='What needs to be done?'\n                        value={this.state.value}\n                        type='text'\n                        onChange={this.handleChange}\n                    />\n                </form>\n            </header>\n        )\n    }\n\n}\n","import React from 'react';\n\n\nclass Main extends React.Component {\n    render() {\n        let list = this.props.items.map((el) => {\n            return (\n                <li key={el.id}\n                    className=\"itemBox\">\n                    <div className=\"item\">\n                        <input\n                            onChange={() => this.props.change(el.id)}\n                            checked={el.completed}\n                            className=\"toggle\"\n                            type=\"checkbox\"\n                        />\n                        <label>{el.title}</label>\n                        <button\n                            className=\"destroy\"\n                            onClick={() => this.props.removeItem(el.id)}\n                        >\n                        </button>\n                    </div>\n                </li>\n            )\n        });\n\n        return (\n            <section className=\"main\">\n                <input\n                    id=\"toggle-all\"\n                    className=\"toggle-all\"\n                    type=\"checkbox\"\n                />\n                <label htmlFor=\"toggle-all\"> </label>\n                <ul className=\"todo-list\">\n                    {list}\n                </ul>\n            </section>\n        )\n\n    }\n\n}\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Main from './components/Main';\n\n// import Footer from \"./components/Footer\";\n\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            itemsList: [],\n        }\n    }\n\n    changeItem = (id) => {\n        const todos = [...this.state.itemsList];\n        const index = todos.findIndex((item) => item.id === id);\n        todos[index] = {\n            ...todos[index],\n            completed: !todos[index].completed\n        };\n        this.setState({itemsList: todos})\n    };\n\n    addItem = (item) => {\n        if (!item) return;\n        const todoItem = {\n            id: Date.now(),\n            title: item,\n            completed: false\n        };\n        this.setState((prev) => ({\n                itemsList: [\n                    ...prev.itemsList,\n                    todoItem\n                ]\n            }\n        ))\n    };\n\n    removeItem = (id) => {\n        this.setState((prev) => {\n            let copyList = [...prev.itemsList];\n            copyList.splice(id, 1);\n            return {\n                itemsList:\n                    prev.itemsList.filter((item) => item.id !== id)\n            }\n        })\n    };\n\n    render() {\n        return (\n            <div className=\"todoapp\">\n                <Header addItem={this.addItem}/>\n                <Main\n                    items={this.state.itemsList}\n                    removeItem={this.removeItem}\n                    change={this.changeItem}\n                />\n                {/*<Footer/>*/}\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}