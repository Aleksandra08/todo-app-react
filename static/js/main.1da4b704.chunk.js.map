{"version":3,"sources":["components/Header.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","itemsList","value","handleChange","event","setState","target","handleSubmit","console","log","preventDefault","addItem","react_default","a","createElement","className","onSubmit","placeholder","type","onChange","React","Component","Main","list","items","map","el","id","App","dataItem","prevData","todosArray","concat","toConsumableArray","Header_Header","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAEqBA,qBACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,UAAW,GACXC,MAAO,IAGXT,EAAKU,aAAe,SAACC,GACjBX,EAAKY,SAAS,CAACH,MAAOE,EAAME,OAAOJ,SAGvCT,EAAKc,aAAe,SAACH,GACjBI,QAAQC,IAAI,aAAehB,EAAKO,MAAME,OACtCE,EAAMM,iBACNjB,EAAKD,MAAMmB,QAAQlB,EAAKO,MAAME,OAC9BT,EAAKY,SAAS,CACVH,MAAO,MAhBAT,wEAuBf,OACImB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,QAAME,SAAUpB,KAAKW,cACjBK,EAAAC,EAAAC,cAAA,SACIC,UAAU,WACVE,YAAY,yBACZf,MAAON,KAAKI,MAAME,MAClBgB,KAAK,OACLC,SAAUvB,KAAKO,wBAjCHiB,IAAMC,YC4B3BC,cA3BX,SAAAA,EAAY9B,GAAQ,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAA0B,GAAA5B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4B,GAAAvB,KAAAH,KACVJ,0EAIN,IAAI+B,EAAO3B,KAAKJ,MAAMgC,MAAMC,IAAI,SAACC,GAC7B,OAAOd,EAAAC,EAAAC,cAAA,cAAMY,EAAN,OAGX,OACId,EAAAC,EAAAC,cAAA,WAASC,UAAU,QACfH,EAAAC,EAAAC,cAAA,SACIa,GAAG,aACHZ,UAAU,aACVG,KAAK,aAGTN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACTQ,WAnBFH,IAAMC,WCkCVO,cA7BX,SAAAA,IAAc,IAAAnC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgC,IACVnC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkC,GAAA7B,KAAAH,QAMJe,QAAU,SAACkB,GACPpC,EAAKY,SAAS,SAACyB,GACP,MAAO,CACHC,WAAU,GAAAC,OAAAtC,OAAAuC,EAAA,EAAAvC,CACHoC,EAASC,YADN,CAENF,QAVhBpC,EAAKO,MAAQ,CACT+B,WAAY,IAHNtC,wEAoBV,OACImB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAACoB,EAAD,CAAQvB,QAASf,KAAKe,UACtBC,EAAAC,EAAAC,cAACqB,EAAD,CAAMX,MAAO5B,KAAKI,MAAM+B,qBAxBtBX,IAAMC,WCMJe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1da4b704.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Header extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            itemsList: [],\n            value: ''\n        };\n\n        this.handleChange = (event) => {\n            this.setState({value: event.target.value});\n        };\n\n        this.handleSubmit = (event) => {\n            console.log('Data item:' + this.state.value);\n            event.preventDefault();\n            this.props.addItem(this.state.value);\n            this.setState({\n                value: ''\n            })\n        }\n\n    }\n\n    render() {\n        return (\n            <header className='header'>\n                <h1>todos</h1>\n                <form onSubmit={this.handleSubmit}>\n                    <input\n                        className='new-todo'\n                        placeholder='What needs to be done?'\n                        value={this.state.value}\n                        type='text'\n                        onChange={this.handleChange}\n                    />\n                </form>\n            </header>\n\n        )\n    }\n\n}\n","import React from 'react';\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let list = this.props.items.map((el) => {\n            return <li> {el} </li>\n        });\n\n        return (\n            <section className=\"main\">\n                <input\n                    id=\"toggle-all\"\n                    className=\"toggle-all\"\n                    type=\"checkbox\"\n                />\n\n                <ul className=\"todo-list\">\n                    {list}\n                </ul>\n            </section>\n        )\n\n    }\n\n}\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Main from './components/Main';\n\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            todosArray: []\n        }\n    }\n\n    addItem = (dataItem) => {\n        this.setState((prevData) => {\n                return {\n                    todosArray: [\n                        ...prevData.todosArray,\n                        dataItem\n                    ]\n                }\n            }\n        )\n    };\n\n    render() {\n        return (\n            <div className=\"todoapp\">\n                <Header addItem={this.addItem}/>\n                <Main items={this.state.todosArray}/>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}