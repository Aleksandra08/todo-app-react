{"version":3,"sources":["components/Header.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","event","setState","target","handleSubmit","preventDefault","addItem","react_default","a","createElement","className","onSubmit","placeholder","type","onChange","React","Component","Main","list","items","map","el","index","key","change","onClick","removeItem","id","htmlFor","App","changeItem","item","console","log","prev","itemsList","concat","toConsumableArray","copyList","splice","Header_Header","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c55ebb5.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Header extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: ''\n        };\n\n        this.handleChange = (event) => {\n            this.setState({value: event.target.value});\n        };\n\n        this.handleSubmit = (event) => {\n            event.preventDefault();\n            this.props.addItem(this.state.value);\n            this.setState({\n                value: ''\n            })\n        }\n\n    }\n\n    render() {\n        return (\n            <header className='header'>\n                <h1>todos</h1>\n                <form onSubmit={this.handleSubmit}>\n                    <input\n                        className='new-todo'\n                        placeholder='What needs to be done?'\n                        value={this.state.value}\n                        type='text'\n                        onChange={this.handleChange}\n                    />\n                </form>\n            </header>\n        )\n    }\n\n}\n","import React from 'react';\n\n\nclass Main extends React.Component {\n    render() {\n        let list = this.props.items.map((el,index) => {\n            return (\n                <li key={index} // через Date.now выбивает что уже существует элемент с таким ключем.\n                    onChange={(index) => this.props.change(index)}\n                    className=\"itemBox\">\n                    <div className=\"item\">\n                        <input\n                            className=\"toggle\"\n                            type=\"checkbox\"\n                        />\n                        <label>{el}</label>\n                        <button\n                            className=\"destroy\"\n                            onClick={() => this.props.removeItem(index)}\n                        >\n                        </button>\n                    </div>\n                </li>\n            )\n        });\n\n        return (\n            <section className=\"main\">\n                <input\n                    id=\"toggle-all\"\n                    className=\"toggle-all\"\n                    type=\"checkbox\"\n                />\n                <label htmlFor=\"toggle-all\"> </label>\n                <ul className=\"todo-list\">\n                    {list}\n                </ul>\n            </section>\n        )\n\n    }\n\n}\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Main from './components/Main';\n\n// import Footer from \"./components/Footer\";\n\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            itemsList: []\n        }\n    }\n\n    changeItem = (item) => {\n        console.log(\"Checked\", item)\n    };\n\n    addItem = (item) => { // Просьба подсказать, как в таком случае создавать элементы у которых можно задать свой id,\n        // и остальные флаги с помощью которых смогу далее реализовать все остальные методы. В этом методе не получается(\n        // Так как изначально не продумала всю архитектуру приложения, теперь на каждом шагу все ломаю((\n        if (!item) {\n            return\n        }\n        this.setState((prev) => {\n                return {\n                    itemsList: [\n                        ...prev.itemsList,\n                        item\n                    ]\n                }\n            }\n        )\n    };\n\n    removeItem = (item) => {\n        this.setState((prev) => {\n                let copyList = [...prev.itemsList];\n                copyList.splice(item, 1);\n                return {itemsList: copyList};\n            }\n        )\n    };\n\n    render() {\n        return (\n            <div className=\"todoapp\">\n                <Header addItem={this.addItem}/>\n                <Main\n                    items={this.state.itemsList}\n                    removeItem={this.removeItem}\n                    change={this.changeItem}\n                />\n                {/*<Footer/>*/}\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}