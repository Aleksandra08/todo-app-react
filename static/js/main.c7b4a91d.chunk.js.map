{"version":3,"sources":["components/Header.js","components/Main.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","event","setState","target","handleSubmit","preventDefault","addItem","react_default","a","createElement","className","onSubmit","placeholder","type","onChange","React","Component","Main","list","items","map","el","key","id","change","checked","completed","title","onClick","removeItem","checkedAllItems","htmlFor","Footer","_ref","filterItems","filterField","count","showCurrentList","href","all","active","FIELD","App","changeItem","todos","toConsumableArray","itemsList","index","findIndex","item","objectSpread","todoItem","Date","now","prev","concat","splice","filter","changeFilterBy","field","filterBy","onFilter","listOfItems","filteredItems","Fragment","Header_Header","components_Main","components_Footer","length","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7b4a91d.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n\n    this.handleChange = (event) => {\n      this.setState({value: event.target.value});\n    };\n\n    this.handleSubmit = (event) => {\n      event.preventDefault();\n      this.props.addItem(this.state.value);\n      this.setState({\n        value: ''\n      })\n    }\n  }\n\n  render() {\n    return (\n      <header className='header'>\n        <h1>todos</h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            className='new-todo'\n            placeholder='What needs to be done?'\n            value={this.state.value}\n            type='text'\n            onChange={this.handleChange}\n          />\n        </form>\n      </header>\n    )\n  }\n\n}\n","import React from 'react';\n\nclass Main extends React.Component {\n  render() {\n    let list = this.props.items.map((el) => {\n      return (\n        <li key={el.id}\n            className=\"itemBox\">\n          <div className=\"item\">\n            <input\n              onChange={() => this.props.change(el.id)}\n              checked={el.completed}\n              className=\"toggle\"\n              type=\"checkbox\"\n            />\n            <label>{el.title}</label>\n            <button\n              className=\"destroy\"\n              onClick={() => this.props.removeItem(el.id)}\n            >\n            </button>\n          </div>\n        </li>\n      )\n    });\n\n    return (\n      <section className=\"main\">\n        <input\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          type=\"checkbox\"\n          onClick={this.props.checkedAllItems}\n        />\n        <label htmlFor=\"toggle-all\"> </label>\n        <ul className=\"todo-list\">\n          {list}\n        </ul>\n      </section>\n    )\n  }\n}\n\nexport default Main;","import React from 'react';\n\nfunction Footer({filterItems, filterField, count, showCurrentList}) {\n  return (\n    <div className=\"footer\">\n        <span className=\"todo-count\">\n          <strong> {count}</strong>\n          {'items left'}</span>\n      <ul className=\"footer__filter\">\n        <li>\n          <a href='#/all'\n             className={showCurrentList === filterField.all ? 'selected' : ''}\n             onClick={() => filterItems(filterField.all)}\n          > All </a>\n        </li>\n        <li>\n          <a href='#/active'\n             className={showCurrentList === filterField.active ? 'selected' : ''}\n             onClick={() => filterItems(filterField.active)}\n          > Active </a>\n        </li>\n        <li>\n          <a href='#/completed'\n             className={showCurrentList === filterField.completed ? 'selected' : ''}\n             onClick={() => filterItems(filterField.completed)}\n          > Completed </a>\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Footer from \"./components/Footer\";\n\nconst FIELD = {\n  all: 'all',\n  active: 'active',\n  completed: 'completed'\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      itemsList: [],\n      filterField: FIELD.all,\n      checked: false\n    }\n  }\n\n  changeItem = (id) => {\n    const todos = [...this.state.itemsList];\n    const index = todos.findIndex((item) => item.id === id);\n    todos[index] = {\n      ...todos[index],\n      completed: !todos[index].completed\n    };\n    this.setState({itemsList: todos})\n  };\n\n  addItem = (item) => {\n    if (!item) return;\n    const todoItem = {\n      id: Date.now(),\n      title: item,\n      completed: false\n    };\n    this.setState((prev) => ({\n        itemsList: [\n          ...prev.itemsList,\n          todoItem\n        ]\n      }\n    ))\n  };\n\n  removeItem = (id) => {\n    this.setState((prev) => {\n      let copyList = [...prev.itemsList];\n      copyList.splice(id, 1);\n      return {\n        itemsList:\n          prev.itemsList.filter((item) => item.id !== id),\n      }\n    })\n  };\n\n  changeFilterBy = (field) => {\n    this.setState({filterBy: field})\n  };\n\n  onFilter = (field) => {\n    switch (field) {\n      case FIELD.all: {\n        return this.state.itemsList\n      }\n      case FIELD.active: {\n        return this.state.itemsList.filter((item) => !item.completed)\n      }\n      case FIELD.completed: {\n        return this.state.itemsList.filter((item) => item.completed)\n      }\n      default: {\n        return this.state.itemsList\n      }\n    }\n  };\n\n  checkedAllItems = () => {\n    const listOfItems = this.state.itemsList.map((item) => ({\n      ...item,\n      completed: !this.state.checked,\n    }));\n\n    this.setState({\n      itemsList: listOfItems,\n      checked: !this.state.checked\n    })\n  };\n\n\n  render() {\n    const filteredItems = this.onFilter(this.state.filterBy);\n    return (\n      <>\n        <div className=\"todoapp\">\n          <Header addItem={this.addItem}/>\n          <Main\n            items={filteredItems}\n            removeItem={this.removeItem}\n            change={this.changeItem}\n            checkedAllItems={this.checkedAllItems}\n          />\n          <Footer\n            count={filteredItems.length}\n            filterItems={this.changeFilterBy}\n            filterField={FIELD}\n            showCurrentList={this.state.filterBy}\n          />\n        </div>\n        <div className=\"footer__link\">Created by <a href={'https://github.com/Aleksandra08'}>Oleksandra Starodub</a>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}